(function() {var type_impls = {
"ahash":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashSet%3CT,+S%3E\" class=\"impl\"><a href=\"#impl-HashSet%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S&gt; HashSet&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; usize</h4></section></summary><div class=\"docblock\"><p>Returns the number of elements the set can hold without reallocating.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::with_capacity(<span class=\"number\">100</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">100</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">iter</a>(&amp;self) -&gt; Iter&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all elements in arbitrary order.\nThe iterator element type is <code>&amp;'a T</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\nset.insert(<span class=\"string\">\"a\"</span>);\nset.insert(<span class=\"string\">\"b\"</span>);\n\n<span class=\"comment\">// Will print in an arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>set.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}</code></pre></div>\n<h5 id=\"performance\"><a class=\"doc-anchor\" href=\"#performance\">ยง</a>Performance</h5>\n<p>In the current implementation, iterating over set takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; usize</h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the set.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashSet::new();\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">0</span>);\nv.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set contains no elements.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashSet::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\nv.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.6.0\">1.6.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>(&amp;mut self) -&gt; Drain&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Clears the set, returning all elements as an iterator. Keeps the\nallocated memory for reuse.</p>\n<p>If the returned iterator is dropped before being fully consumed, it\ndrops the remaining elements. The returned iterator keeps a mutable\nborrow on the set to optimize its implementation.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\n<span class=\"comment\">// print 1, 2, 3 in an arbitrary order\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span>set.drain() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{i}\"</span>);\n}\n\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_if\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extract_if</a>&lt;F&gt;(&amp;mut self, pred: F) -&gt; ExtractIf&lt;'_, T, F&gt;<div class=\"where\">where\n    F: FnMut(&amp;T) -&gt; bool,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>hash_extract_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if a value should be removed.</p>\n<p>If the closure returns true, then the value is removed and yielded.\nIf the closure returns false, the value will remain in the list and will not be yielded\nby the iterator.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"HashSet::retain\"><code>retain</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">ยง</a>Examples</h5>\n<p>Splitting a set into even and odd values, reusing the original set:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(hash_extract_if)]\n</span><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;i32&gt; = (<span class=\"number\">0</span>..<span class=\"number\">8</span>).collect();\n<span class=\"kw\">let </span>extracted: HashSet&lt;i32&gt; = set.extract_if(|v| v % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>evens = extracted.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>odds = set.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\nevens.sort();\nodds.sort();\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.18.0\">1.18.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: FnMut(&amp;T) -&gt; bool,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThe elements are visited in unsorted (and unspecified) order.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\nset.retain(|<span class=\"kw-2\">&amp;</span>k| k % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(set, HashSet::from([<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]));</code></pre></div>\n<h5 id=\"performance-1\"><a class=\"doc-anchor\" href=\"#performance-1\">ยง</a>Performance</h5>\n<p>In the current implementation, this operation takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the set, removing all values.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = HashSet::new();\nv.insert(<span class=\"number\">1</span>);\nv.clear();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_hasher\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.7.0, const unstable\">1.7.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/102575\" title=\"Tracking issue for const_collections_with_hasher\">unstable</a>)</span><h4 class=\"code-header\">pub fn <a class=\"fn\">with_hasher</a>(hasher: S) -&gt; HashSet&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new empty hash set which will use the given hasher to hash\nkeys.</p>\n<p>The hash set is also created with the default initial capacity.</p>\n<p>Warning: <code>hasher</code> is normally randomly generated, and\nis designed to allow <code>HashSet</code>s to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.</p>\n<p>The <code>hash_builder</code> passed should implement the [<code>BuildHasher</code>] trait for\nthe HashMap to be useful, see its documentation for details.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">use </span>std::hash::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_hasher(s);\nset.insert(<span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_and_hasher\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.7.0\">1.7.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">with_capacity_and_hasher</a>(capacity: usize, hasher: S) -&gt; HashSet&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet</code> with at least the specified capacity, using\n<code>hasher</code> to hash the keys.</p>\n<p>The hash set will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the hash set will not allocate.</p>\n<p>Warning: <code>hasher</code> is normally randomly generated, and\nis designed to allow <code>HashSet</code>s to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.</p>\n<p>The <code>hash_builder</code> passed should implement the [<code>BuildHasher</code>] trait for\nthe HashMap to be useful, see its documentation for details.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">use </span>std::hash::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_capacity_and_hasher(<span class=\"number\">10</span>, s);\nset.insert(<span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hasher\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.9.0\">1.9.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">hasher</a>(&amp;self) -&gt; &amp;S</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the setโs [<code>BuildHasher</code>].</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">use </span>std::hash::RandomState;\n\n<span class=\"kw\">let </span>hasher = RandomState::new();\n<span class=\"kw\">let </span>set: HashSet&lt;i32&gt; = HashSet::with_hasher(hasher);\n<span class=\"kw\">let </span>hasher: <span class=\"kw-2\">&amp;</span>RandomState = set.hasher();</code></pre></div>\n</div></details></div></details>",0,"ahash::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashSet%3CT,+S%3E\" class=\"impl\"><a href=\"#impl-HashSet%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S&gt; HashSet&lt;T, S&gt;<div class=\"where\">where\n    T: Eq + Hash,\n    S: BuildHasher,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve</a>(&amp;mut self, additional: usize)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the <code>HashSet</code>. The collection may reserve more space to speculatively\navoid frequent reallocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">ยง</a>Panics</h5>\n<p>Panics if the new allocation size overflows <code>usize</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;i32&gt; = HashSet::new();\nset.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.57.0\">1.57.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">try_reserve</a>(&amp;mut self, additional: usize) -&gt; Result&lt;(), TryReserveError&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the <code>HashSet</code>. The collection may reserve more space to speculatively\navoid frequent reallocations. After calling <code>try_reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code> if\nit returns <code>Ok(())</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">ยง</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;i32&gt; = HashSet::new();\nset.try_reserve(<span class=\"number\">10</span>).expect(<span class=\"string\">\"why is the test harness OOMing on a handful of bytes?\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_capacity(<span class=\"number\">100</span>);\nset.insert(<span class=\"number\">1</span>);\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">100</span>);\nset.shrink_to_fit();\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.56.0\">1.56.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: usize)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the set with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::with_capacity(<span class=\"number\">100</span>);\nset.insert(<span class=\"number\">1</span>);\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">100</span>);\nset.shrink_to(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">10</span>);\nset.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(set.capacity() &gt;= <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">difference</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a HashSet&lt;T, S&gt;\n) -&gt; Difference&lt;'a, T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Visits the values representing the difference,\ni.e., the values that are in <code>self</code> but not in <code>other</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// Can be seen as `a - b`.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.difference(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>); <span class=\"comment\">// Print 1\n</span>}\n\n<span class=\"kw\">let </span>diff: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.difference(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"macro\">assert_eq!</span>(diff, [<span class=\"number\">1</span>].iter().collect());\n\n<span class=\"comment\">// Note that difference is not symmetric,\n// and `b - a` means something else:\n</span><span class=\"kw\">let </span>diff: HashSet&lt;<span class=\"kw\">_</span>&gt; = b.difference(<span class=\"kw-2\">&amp;</span>a).collect();\n<span class=\"macro\">assert_eq!</span>(diff, [<span class=\"number\">4</span>].iter().collect());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">symmetric_difference</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a HashSet&lt;T, S&gt;\n) -&gt; SymmetricDifference&lt;'a, T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Visits the values representing the symmetric difference,\ni.e., the values that are in <code>self</code> or in <code>other</code> but not in both.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// Print 1, 4 in arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.symmetric_difference(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"kw\">let </span>diff1: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.symmetric_difference(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"kw\">let </span>diff2: HashSet&lt;<span class=\"kw\">_</span>&gt; = b.symmetric_difference(<span class=\"kw-2\">&amp;</span>a).collect();\n\n<span class=\"macro\">assert_eq!</span>(diff1, diff2);\n<span class=\"macro\">assert_eq!</span>(diff1, [<span class=\"number\">1</span>, <span class=\"number\">4</span>].iter().collect());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">intersection</a>&lt;'a&gt;(\n    &amp;'a self,\n    other: &amp;'a HashSet&lt;T, S&gt;\n) -&gt; Intersection&lt;'a, T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Visits the values representing the intersection,\ni.e., the values that are both in <code>self</code> and <code>other</code>.</p>\n<p>When an equal element is present in <code>self</code> and <code>other</code>\nthen the resulting <code>Intersection</code> may yield references to\none or the other. This can be relevant if <code>T</code> contains fields which\nare not compared by its <code>Eq</code> implementation, and may hold different\nvalue between the two equal copies of <code>T</code> in the two sets.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// Print 2, 3 in arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.intersection(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"kw\">let </span>intersection: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.intersection(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"macro\">assert_eq!</span>(intersection, [<span class=\"number\">2</span>, <span class=\"number\">3</span>].iter().collect());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">union</a>&lt;'a&gt;(&amp;'a self, other: &amp;'a HashSet&lt;T, S&gt;) -&gt; Union&lt;'a, T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Visits the values representing the union,\ni.e., all the values in <code>self</code> or <code>other</code>, without duplicates.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = HashSet::from([<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// Print 1, 2, 3, 4 in arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span>a.union(<span class=\"kw-2\">&amp;</span>b) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n\n<span class=\"kw\">let union</span>: HashSet&lt;<span class=\"kw\">_</span>&gt; = a.union(<span class=\"kw-2\">&amp;</span>b).collect();\n<span class=\"macro\">assert_eq!</span>(union, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].iter().collect());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">contains</a>&lt;Q&gt;(&amp;self, value: &amp;Q) -&gt; bool<div class=\"where\">where\n    T: Borrow&lt;Q&gt;,\n    Q: Hash + Eq + ?Sized,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set contains a value.</p>\n<p>The value may be any borrowed form of the setโs value type, but\n[<code>Hash</code>] and [<code>Eq</code>] on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.9.0\">1.9.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">get</a>&lt;Q&gt;(&amp;self, value: &amp;Q) -&gt; Option&lt;&amp;T&gt;<div class=\"where\">where\n    T: Borrow&lt;Q&gt;,\n    Q: Hash + Eq + ?Sized,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value in the set, if any, that is equal to the given value.</p>\n<p>The value may be any borrowed form of the setโs value type, but\n[<code>Hash</code>] and [<code>Eq</code>] on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; &amp;T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>hash_set_entry</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the given <code>value</code> into the set if it is not present, then\nreturns a reference to the value in the set.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(hash_set_entry)]\n\n</span><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(set.get_or_insert(<span class=\"number\">2</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.get_or_insert(<span class=\"number\">100</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">4</span>); <span class=\"comment\">// 100 was inserted</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_owned\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert_owned</a>&lt;Q&gt;(&amp;mut self, value: &amp;Q) -&gt; &amp;T<div class=\"where\">where\n    T: Borrow&lt;Q&gt;,\n    Q: Hash + Eq + ToOwned&lt;Owned = T&gt; + ?Sized,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>hash_set_entry</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts an owned copy of the given <code>value</code> into the set if it is not\npresent, then returns a reference to the value in the set.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(hash_set_entry)]\n\n</span><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;String&gt; = [<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"horse\"</span>]\n    .iter().map(|<span class=\"kw-2\">&amp;</span>pet| pet.to_owned()).collect();\n\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">3</span>);\n<span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>pet <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"fish\"</span>] {\n    <span class=\"kw\">let </span>value = set.get_or_insert_owned(pet);\n    <span class=\"macro\">assert_eq!</span>(value, pet);\n}\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">4</span>); <span class=\"comment\">// a new \"fish\" was inserted</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert_with</a>&lt;Q, F&gt;(&amp;mut self, value: &amp;Q, f: F) -&gt; &amp;T<div class=\"where\">where\n    T: Borrow&lt;Q&gt;,\n    Q: Hash + Eq + ?Sized,\n    F: FnOnce(&amp;Q) -&gt; T,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>hash_set_entry</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the set if the given <code>value</code> is\nnot present, then returns a reference to the value in the set.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(hash_set_entry)]\n\n</span><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set: HashSet&lt;String&gt; = [<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"horse\"</span>]\n    .iter().map(|<span class=\"kw-2\">&amp;</span>pet| pet.to_owned()).collect();\n\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">3</span>);\n<span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>pet <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"cat\"</span>, <span class=\"string\">\"dog\"</span>, <span class=\"string\">\"fish\"</span>] {\n    <span class=\"kw\">let </span>value = set.get_or_insert_with(pet, str::to_owned);\n    <span class=\"macro\">assert_eq!</span>(value, pet);\n}\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">4</span>); <span class=\"comment\">// a new \"fish\" was inserted</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_disjoint\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">is_disjoint</a>(&amp;self, other: &amp;HashSet&lt;T, S&gt;) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.\nThis is equivalent to checking for an empty intersection.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>a = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">true</span>);\nb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">true</span>);\nb.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.is_disjoint(<span class=\"kw-2\">&amp;</span>b), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_subset\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">is_subset</a>(&amp;self, other: &amp;HashSet&lt;T, S&gt;) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set is a subset of another,\ni.e., <code>other</code> contains at least all the values in <code>self</code>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>sup = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">true</span>);\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">true</span>);\nset.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_subset(<span class=\"kw-2\">&amp;</span>sup), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_superset\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">is_superset</a>(&amp;self, other: &amp;HashSet&lt;T, S&gt;) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the set is a superset of another,\ni.e., <code>self</code> contains at least all the values in <code>other</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span>sub = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">false</span>);\n\nset.insert(<span class=\"number\">0</span>);\nset.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">false</span>);\n\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.is_superset(<span class=\"kw-2\">&amp;</span>sub), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Adds a value to the set.</p>\n<p>Returns whether the value was newly inserted. That is:</p>\n<ul>\n<li>If the set did not previously contain this value, <code>true</code> is returned.</li>\n<li>If the set already contained this value, <code>false</code> is returned,\nand the set is not modified: original value is not replaced,\nand the value passed as argument is dropped.</li>\n</ul>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\n<span class=\"macro\">assert_eq!</span>(set.insert(<span class=\"number\">2</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.insert(<span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(set.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.9.0\">1.9.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\nset.insert(Vec::&lt;i32&gt;::new());\n\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span>[][..]).unwrap().capacity(), <span class=\"number\">0</span>);\nset.replace(Vec::with_capacity(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(set.get(<span class=\"kw-2\">&amp;</span>[][..]).unwrap().capacity(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>&lt;Q&gt;(&amp;mut self, value: &amp;Q) -&gt; bool<div class=\"where\">where\n    T: Borrow&lt;Q&gt;,\n    Q: Hash + Eq + ?Sized,</div></h4></section></summary><div class=\"docblock\"><p>Removes a value from the set. Returns whether the value was\npresent in the set.</p>\n<p>The value may be any borrowed form of the setโs value type, but\n[<code>Hash</code>] and [<code>Eq</code>] on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\n\nset.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(set.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.9.0\">1.9.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">take</a>&lt;Q&gt;(&amp;mut self, value: &amp;Q) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    T: Borrow&lt;Q&gt;,\n    Q: Hash + Eq + ?Sized,</div></h4></section></summary><div class=\"docblock\"><p>Removes and returns the value in the set, if any, that is equal to the given one.</p>\n<p>The value may be any borrowed form of the setโs value type, but\n[<code>Hash</code>] and [<code>Eq</code>] on the borrowed form <em>must</em> match those for\nthe value type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(set.take(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(set.take(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"ahash::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Clone-for-HashSet%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S&gt; Clone for HashSet&lt;T, S&gt;<div class=\"where\">where\n    T: Clone,\n    S: Clone,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">clone</a>(&amp;self) -&gt; HashSet&lt;T, S&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_from</a>(&amp;mut self, other: &amp;HashSet&lt;T, S&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a>Read more</a></div></details></div></details>","Clone","ahash::HashSet"],["<section id=\"impl-Eq-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Eq-for-HashSet%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S&gt; Eq for HashSet&lt;T, S&gt;<div class=\"where\">where\n    T: Eq + Hash,\n    S: BuildHasher,</div></h3></section>","Eq","ahash::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-IntoIterator-for-HashSet%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S&gt; IntoIterator for HashSet&lt;T, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">into_iter</a>(self) -&gt; IntoIter&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashSet;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = HashSet::new();\nset.insert(<span class=\"string\">\"a\"</span>.to_string());\nset.insert(<span class=\"string\">\"b\"</span>.to_string());\n\n<span class=\"comment\">// Not possible to collect to a Vec&lt;String&gt; with a regular `.iter()`.\n</span><span class=\"kw\">let </span>v: Vec&lt;String&gt; = set.into_iter().collect();\n\n<span class=\"comment\">// Will print in an arbitrary order.\n</span><span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>v {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a class=\"associatedtype\">IntoIter</a> = IntoIter&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","ahash::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Default-for-HashSet%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S&gt; Default for HashSet&lt;T, S&gt;<div class=\"where\">where\n    S: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; HashSet&lt;T, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for the hasher.</p>\n</div></details></div></details>","Default","ahash::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Debug-for-HashSet%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S&gt; Debug for HashSet&lt;T, S&gt;<div class=\"where\">where\n    T: Debug,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","ahash::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialEq-for-HashSet%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S&gt; PartialEq for HashSet&lt;T, S&gt;<div class=\"where\">where\n    T: Eq + Hash,\n    S: BuildHasher,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, other: &amp;HashSet&lt;T, S&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","ahash::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Extend%3C%26T%3E-for-HashSet%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, T, S&gt; Extend&lt;&amp;'a T&gt; for HashSet&lt;T, S&gt;<div class=\"where\">where\n    T: 'a + Eq + Hash + Copy,\n    S: BuildHasher,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: IntoIterator&lt;Item = &amp;'a T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a href=\"#method.extend_one\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">extend_one</a>(&amp;mut self, _: &amp;'a T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a href=\"#method.extend_reserve\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">extend_reserve</a>(&amp;mut self, additional: usize)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a>Read more</a></div></details></div></details>","Extend<&'a T>","ahash::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Extend%3CT%3E-for-HashSet%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S&gt; Extend&lt;T&gt; for HashSet&lt;T, S&gt;<div class=\"where\">where\n    T: Eq + Hash,\n    S: BuildHasher,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: IntoIterator&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a href=\"#method.extend_one\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">extend_one</a>(&amp;mut self, item: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a href=\"#method.extend_reserve\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">extend_reserve</a>(&amp;mut self, additional: usize)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a>Read more</a></div></details></div></details>","Extend<T>","ahash::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-HashSet%3CT,+S%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-FromIterator%3CT%3E-for-HashSet%3CT,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, S&gt; FromIterator&lt;T&gt; for HashSet&lt;T, S&gt;<div class=\"where\">where\n    T: Eq + Hash,\n    S: BuildHasher + Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; HashSet&lt;T, S&gt;<div class=\"where\">where\n    I: IntoIterator&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a>Read more</a></div></details></div></details>","FromIterator<T>","ahash::HashSet"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashSetExt-for-HashSet%3CK,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ahash/lib.rs.html#187-198\">source</a><a href=\"#impl-HashSetExt-for-HashSet%3CK,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, S&gt; <a class=\"trait\" href=\"ahash/trait.HashSetExt.html\" title=\"trait ahash::HashSetExt\">HashSetExt</a> for HashSet&lt;K, S&gt;<div class=\"where\">where\n    S: BuildHasher + Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ahash/lib.rs.html#191-193\">source</a><a href=\"#method.new\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"ahash/trait.HashSetExt.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class='docblock'>Constructs a new HashSet</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ahash/lib.rs.html#195-197\">source</a><a href=\"#method.with_capacity\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"ahash/trait.HashSetExt.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: usize) -&gt; Self</h4></section></summary><div class='docblock'>Constructs a new HashSet with a given initial capacity</div></details></div></details>","HashSetExt","ahash::HashSet"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()
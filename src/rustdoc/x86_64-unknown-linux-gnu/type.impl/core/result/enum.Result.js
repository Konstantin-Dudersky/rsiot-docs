(function() {var type_impls = {
"rsiot":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arbitrary%3C'a%3E-for-Result%3CA,+B%3E\" class=\"impl\"><a href=\"#impl-Arbitrary%3C'a%3E-for-Result%3CA,+B%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B&gt; Arbitrary&lt;'a&gt; for Result&lt;A, B&gt;<div class=\"where\">where\n    A: Arbitrary&lt;'a&gt;,\n    B: Arbitrary&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary\" class=\"method trait-impl\"><a href=\"#method.arbitrary\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arbitrary</a>(u: &amp;mut Unstructured&lt;'a&gt;) -&gt; Result&lt;Result&lt;A, B&gt;, Error&gt;</h4></section></summary><div class='docblock'>Generate an arbitrary value of <code>Self</code> from the given unstructured data. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(depth: usize) -&gt; (usize, Option&lt;usize&gt;)</h4></section></summary><div class='docblock'>Get a size hint for how many bytes out of an <code>Unstructured</code> this type\nneeds to construct itself. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary_take_rest\" class=\"method trait-impl\"><a href=\"#method.arbitrary_take_rest\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arbitrary_take_rest</a>(u: Unstructured&lt;'a&gt;) -&gt; Result&lt;Self, Error&gt;</h4></section></summary><div class='docblock'>Generate an arbitrary value of <code>Self</code> from the entirety of the given\nunstructured data. <a>Read more</a></div></details></div></details>","Arbitrary<'a>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Clone-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Clone for Result&lt;T, E&gt;<div class=\"where\">where\n    T: Clone,\n    E: Clone,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone</a>(&amp;self) -&gt; Result&lt;T, E&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Result&lt;T, E&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a>Read more</a></div></details></div></details>","Clone","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Context%3CT,+E%3E-for-Result%3CT,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/anyhow/1.0.82/src/anyhow/context.rs.html#42-44\">source</a><a href=\"#impl-Context%3CT,+E%3E-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"trait\" href=\"https://docs.rs/anyhow/1.0.82/anyhow/trait.Context.html\" title=\"trait anyhow::Context\">Context</a>&lt;T, E&gt; for Result&lt;T, E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://docs.rs/anyhow/1.0.82/anyhow/context/ext/trait.StdError.html\" title=\"trait anyhow::context::ext::StdError\">StdError</a> + Send + Sync + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/anyhow/1.0.82/src/anyhow/context.rs.html#46-48\">source</a><a href=\"#method.context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/anyhow/1.0.82/anyhow/trait.Context.html#tymethod.context\" class=\"fn\">context</a>&lt;C&gt;(self, context: C) -&gt; Result&lt;T, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.82/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    C: Display + Send + Sync + 'static,</div></h4></section></summary><div class='docblock'>Wrap the error value with additional context.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/anyhow/1.0.82/src/anyhow/context.rs.html#58-61\">source</a><a href=\"#method.with_context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/anyhow/1.0.82/anyhow/trait.Context.html#tymethod.with_context\" class=\"fn\">with_context</a>&lt;C, F&gt;(self, context: F) -&gt; Result&lt;T, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.82/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    C: Display + Send + Sync + 'static,\n    F: FnOnce() -&gt; C,</div></h4></section></summary><div class='docblock'>Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.</div></details></div></details>","Context<T, E>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Debug-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Debug for Result&lt;T, E&gt;<div class=\"where\">where\n    T: Debug,\n    E: Debug,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Result%3CT,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/de/impls.rs.html#2880-2883\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, E&gt; <a class=\"trait\" href=\"rsiot/message/trait.Deserialize.html\" title=\"trait rsiot::message::Deserialize\">Deserialize</a>&lt;'de&gt; for Result&lt;T, E&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"rsiot/message/trait.Deserialize.html\" title=\"trait rsiot::message::Deserialize\">Deserialize</a>&lt;'de&gt;,\n    E: <a class=\"trait\" href=\"rsiot/message/trait.Deserialize.html\" title=\"trait rsiot::message::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/de/impls.rs.html#2885-2887\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rsiot/message/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; Result&lt;Result&lt;T, E&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"rsiot/message/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+Result%3CT,+E%3E%3E-for-Result%3CTAs,+EAs%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.7.0/src/serde_with/de/impls.rs.html#311-314\">source</a><a href=\"#impl-DeserializeAs%3C'de,+Result%3CT,+E%3E%3E-for-Result%3CTAs,+EAs%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, TAs, E, EAs&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.7.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, Result&lt;T, E&gt;&gt; for Result&lt;TAs, EAs&gt;<div class=\"where\">where\n    TAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.7.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, T&gt;,\n    EAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.7.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, E&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.7.0/src/serde_with/de/impls.rs.html#316-318\">source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.7.0/serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; Result&lt;Result&lt;T, E&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, Result<T, E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CResult%3CA,+E%3E%3E-for-Result%3CV,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-FromIterator%3CResult%3CA,+E%3E%3E-for-Result%3CV,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, E, V&gt; FromIterator&lt;Result&lt;A, E&gt;&gt; for Result&lt;V, E&gt;<div class=\"where\">where\n    V: FromIterator&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; Result&lt;V, E&gt;<div class=\"where\">where\n    I: IntoIterator&lt;Item = Result&lt;A, E&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no further\nelements are taken, and the <code>Err</code> is returned. Should no <code>Err</code> occur, a\ncontainer with the values of each <code>Result</code> is returned.</p>\n<p>Here is an example which increments every integer in a vector,\nchecking for overflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; = v.iter().map(|x: <span class=\"kw-2\">&amp;</span>u32|\n    x.checked_add(<span class=\"number\">1</span>).ok_or(<span class=\"string\">\"Overflow!\"</span>)\n).collect();\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>];\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; = v.iter().map(|x: <span class=\"kw-2\">&amp;</span>u32|\n    x.checked_sub(<span class=\"number\">1</span>).ok_or(<span class=\"string\">\"Underflow!\"</span>)\n).collect();\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"Underflow!\"</span>));</code></pre></div>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>Err</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; = v.iter().map(|x: <span class=\"kw-2\">&amp;</span>u32| {\n    shared += x;\n    x.checked_sub(<span class=\"number\">2</span>).ok_or(<span class=\"string\">\"Underflow!\"</span>)\n}).collect();\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"Underflow!\"</span>));\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Result<A, E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromRequest%3CS%3E-for-Result%3CT,+%3CT+as+FromRequest%3CS%3E%3E::Rejection%3E\" class=\"impl\"><a href=\"#impl-FromRequest%3CS%3E-for-Result%3CT,+%3CT+as+FromRequest%3CS%3E%3E::Rejection%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, T&gt; FromRequest&lt;S&gt; for Result&lt;T, &lt;T as FromRequest&lt;S&gt;&gt;::Rejection&gt;<div class=\"where\">where\n    T: FromRequest&lt;S&gt;,\n    S: Send + Sync,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Rejection\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Rejection\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Rejection</a> = Infallible</h4></section></summary><div class='docblock'>If the extractor fails it’ll use this “rejection” type. A rejection is\na kind of error that can be converted into a response.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_request\" class=\"method trait-impl\"><a href=\"#method.from_request\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_request</a>&lt;'life0, 'async_trait&gt;(\n    req: Request&lt;Body&gt;,\n    state: &amp;'life0 S\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;Result&lt;T, &lt;T as FromRequest&lt;S&gt;&gt;::Rejection&gt;, &lt;Result&lt;T, &lt;T as FromRequest&lt;S&gt;&gt;::Rejection&gt; as FromRequest&lt;S&gt;&gt;::Rejection&gt;&gt; + Send + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    Result&lt;T, &lt;T as FromRequest&lt;S&gt;&gt;::Rejection&gt;: 'async_trait,</div></h4></section></summary><div class='docblock'>Perform the extraction.</div></details></div></details>","FromRequest<S>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromRequestParts%3CS%3E-for-Result%3CT,+%3CT+as+FromRequestParts%3CS%3E%3E::Rejection%3E\" class=\"impl\"><a href=\"#impl-FromRequestParts%3CS%3E-for-Result%3CT,+%3CT+as+FromRequestParts%3CS%3E%3E::Rejection%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, T&gt; FromRequestParts&lt;S&gt; for Result&lt;T, &lt;T as FromRequestParts&lt;S&gt;&gt;::Rejection&gt;<div class=\"where\">where\n    T: FromRequestParts&lt;S&gt;,\n    S: Send + Sync,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Rejection\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Rejection\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Rejection</a> = Infallible</h4></section></summary><div class='docblock'>If the extractor fails it’ll use this “rejection” type. A rejection is\na kind of error that can be converted into a response.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_request_parts\" class=\"method trait-impl\"><a href=\"#method.from_request_parts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_request_parts</a>&lt;'life0, 'life1, 'async_trait&gt;(\n    parts: &amp;'life0 mut Parts,\n    state: &amp;'life1 S\n) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = Result&lt;Result&lt;T, &lt;T as FromRequestParts&lt;S&gt;&gt;::Rejection&gt;, &lt;Result&lt;T, &lt;T as FromRequestParts&lt;S&gt;&gt;::Rejection&gt; as FromRequestParts&lt;S&gt;&gt;::Rejection&gt;&gt; + Send + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    'life1: 'async_trait,\n    Result&lt;T, &lt;T as FromRequestParts&lt;S&gt;&gt;::Rejection&gt;: 'async_trait,</div></h4></section></summary><div class='docblock'>Perform the extraction.</div></details></div></details>","FromRequestParts<S>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Result%3CT,+F%3E\" class=\"impl\"><a href=\"#impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Result%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; FromResidual&lt;Result&lt;Infallible, E&gt;&gt; for Result&lt;T, F&gt;<div class=\"where\">where\n    F: From&lt;E&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_residual</a>(residual: Result&lt;Infallible, E&gt;) -&gt; Result&lt;T, F&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a>Read more</a></div></details></div></details>","FromResidual<Result<Infallible, E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3CE%3E%3E-for-Result%3CT,+F%3E\" class=\"impl\"><a href=\"#impl-FromResidual%3CYeet%3CE%3E%3E-for-Result%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; FromResidual&lt;Yeet&lt;E&gt;&gt; for Result&lt;T, F&gt;<div class=\"where\">where\n    F: From&lt;E&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_residual</a>(_: Yeet&lt;E&gt;) -&gt; Result&lt;T, F&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a>Read more</a></div></details></div></details>","FromResidual<Yeet<E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Hash-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Hash for Result&lt;T, E&gt;<div class=\"where\">where\n    T: Hash,\n    E: Hash,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: &amp;mut __H)<div class=\"where\">where\n    __H: Hasher,</div></h4></section></summary><div class='docblock'>Feeds this value into the given [<code>Hasher</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: &amp;mut H)<div class=\"where\">where\n    H: Hasher,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given [<code>Hasher</code>]. <a>Read more</a></div></details></div></details>","Hash","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDiagnostic%3CT,+E%3E-for-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-IntoDiagnostic%3CT,+E%3E-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; IntoDiagnostic&lt;T, E&gt; for Result&lt;T, E&gt;<div class=\"where\">where\n    E: Error + Send + Sync + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_diagnostic\" class=\"method trait-impl\"><a href=\"#method.into_diagnostic\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_diagnostic</a>(self) -&gt; Result&lt;T, Report&gt;</h4></section></summary><div class='docblock'>Converts [<code>Result</code>] types that return regular [<code>std::error::Error</code>]s\ninto a [<code>Result</code>] that returns a [<code>Diagnostic</code>].</div></details></div></details>","IntoDiagnostic<T, E>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-IntoIterator-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; IntoIterator for Result&lt;T, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_iter</a>(self) -&gt; IntoIter&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<p>The iterator yields one value if the result is [<code>Result::Ok</code>], otherwise none.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>v: Vec&lt;u32&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">5</span>]);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"nothing!\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;u32&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, []);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">IntoIter</a> = IntoIter&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoMapRequestResult%3CB%3E-for-Result%3CRequest%3CB%3E,+E%3E\" class=\"impl\"><a href=\"#impl-IntoMapRequestResult%3CB%3E-for-Result%3CRequest%3CB%3E,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B, E&gt; IntoMapRequestResult&lt;B&gt; for Result&lt;Request&lt;B&gt;, E&gt;<div class=\"where\">where\n    E: IntoResponse,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_map_request_result\" class=\"method trait-impl\"><a href=\"#method.into_map_request_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_map_request_result</a>(self) -&gt; Result&lt;Request&lt;B&gt;, Response&lt;Body&gt;&gt;</h4></section></summary><div class='docblock'>Perform the conversion.</div></details></div></details>","IntoMapRequestResult<B>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoResponse-for-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-IntoResponse-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; IntoResponse for Result&lt;T, E&gt;<div class=\"where\">where\n    T: IntoResponse,\n    E: IntoResponse,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_response\" class=\"method trait-impl\"><a href=\"#method.into_response\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_response</a>(self) -&gt; Response&lt;Body&gt;</h4></section></summary><div class='docblock'>Create a response.</div></details></div></details>","IntoResponse","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MultiOps%3CResult%3C%26RoaringBitmap,+E%3E%3E-for-I\" class=\"impl\"><a href=\"#impl-MultiOps%3CResult%3C%26RoaringBitmap,+E%3E%3E-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, I, E&gt; MultiOps&lt;Result&lt;&amp;'a RoaringBitmap, E&gt;&gt; for I<div class=\"where\">where\n    E: 'a,\n    I: IntoIterator&lt;Item = Result&lt;&amp;'a RoaringBitmap, E&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = Result&lt;RoaringBitmap, E&gt;</h4></section></summary><div class='docblock'>The type of output from operations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;&amp;'a RoaringBitmap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>union</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method trait-impl\"><a href=\"#method.intersection\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersection</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;&amp;'a RoaringBitmap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>intersection</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method trait-impl\"><a href=\"#method.difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">difference</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;&amp;'a RoaringBitmap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>difference</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method trait-impl\"><a href=\"#method.symmetric_difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">symmetric_difference</a>(\n    self\n) -&gt; &lt;I as MultiOps&lt;Result&lt;&amp;'a RoaringBitmap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>symmetric difference</code> between all elements.</div></details></div></details>","MultiOps<Result<&'a RoaringBitmap, E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MultiOps%3CResult%3C%26RoaringTreemap,+E%3E%3E-for-I\" class=\"impl\"><a href=\"#impl-MultiOps%3CResult%3C%26RoaringTreemap,+E%3E%3E-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, I, E&gt; MultiOps&lt;Result&lt;&amp;'a RoaringTreemap, E&gt;&gt; for I<div class=\"where\">where\n    E: 'a,\n    I: IntoIterator&lt;Item = Result&lt;&amp;'a RoaringTreemap, E&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = Result&lt;RoaringTreemap, E&gt;</h4></section></summary><div class='docblock'>The type of output from operations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;&amp;'a RoaringTreemap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>union</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method trait-impl\"><a href=\"#method.intersection\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersection</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;&amp;'a RoaringTreemap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>intersection</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method trait-impl\"><a href=\"#method.difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">difference</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;&amp;'a RoaringTreemap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>difference</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method trait-impl\"><a href=\"#method.symmetric_difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">symmetric_difference</a>(\n    self\n) -&gt; &lt;I as MultiOps&lt;Result&lt;&amp;'a RoaringTreemap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>symmetric difference</code> between all elements.</div></details></div></details>","MultiOps<Result<&'a RoaringTreemap, E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MultiOps%3CResult%3CRoaringBitmap,+E%3E%3E-for-I\" class=\"impl\"><a href=\"#impl-MultiOps%3CResult%3CRoaringBitmap,+E%3E%3E-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, E&gt; MultiOps&lt;Result&lt;RoaringBitmap, E&gt;&gt; for I<div class=\"where\">where\n    I: IntoIterator&lt;Item = Result&lt;RoaringBitmap, E&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = Result&lt;RoaringBitmap, E&gt;</h4></section></summary><div class='docblock'>The type of output from operations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;RoaringBitmap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>union</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method trait-impl\"><a href=\"#method.intersection\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersection</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;RoaringBitmap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>intersection</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method trait-impl\"><a href=\"#method.difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">difference</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;RoaringBitmap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>difference</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method trait-impl\"><a href=\"#method.symmetric_difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">symmetric_difference</a>(\n    self\n) -&gt; &lt;I as MultiOps&lt;Result&lt;RoaringBitmap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>symmetric difference</code> between all elements.</div></details></div></details>","MultiOps<Result<RoaringBitmap, E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MultiOps%3CResult%3CRoaringTreemap,+E%3E%3E-for-I\" class=\"impl\"><a href=\"#impl-MultiOps%3CResult%3CRoaringTreemap,+E%3E%3E-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, E&gt; MultiOps&lt;Result&lt;RoaringTreemap, E&gt;&gt; for I<div class=\"where\">where\n    I: IntoIterator&lt;Item = Result&lt;RoaringTreemap, E&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = Result&lt;RoaringTreemap, E&gt;</h4></section></summary><div class='docblock'>The type of output from operations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;RoaringTreemap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>union</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method trait-impl\"><a href=\"#method.intersection\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersection</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;RoaringTreemap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>intersection</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method trait-impl\"><a href=\"#method.difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">difference</a>(self) -&gt; &lt;I as MultiOps&lt;Result&lt;RoaringTreemap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>difference</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method trait-impl\"><a href=\"#method.symmetric_difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">symmetric_difference</a>(\n    self\n) -&gt; &lt;I as MultiOps&lt;Result&lt;RoaringTreemap, E&gt;&gt;&gt;::Output</h4></section></summary><div class='docblock'>The <code>symmetric difference</code> between all elements.</div></details></div></details>","MultiOps<Result<RoaringTreemap, E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonBlockingResult-for-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-NonBlockingResult-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; NonBlockingResult for Result&lt;T, E&gt;<div class=\"where\">where\n    E: NonBlockingError,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Result\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Result\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Result</a> = Result&lt;Option&lt;T&gt;, E&gt;</h4></section></summary><div class='docblock'>Type of the converted result: <code>Result&lt;Option&lt;T&gt;, E&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.no_block\" class=\"method trait-impl\"><a href=\"#method.no_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">no_block</a>(self) -&gt; &lt;Result&lt;T, E&gt; as NonBlockingResult&gt;::Result</h4></section></summary><div class='docblock'>Perform the non-block conversion.</div></details></div></details>","NonBlockingResult","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonBlockingResult-for-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-NonBlockingResult-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; NonBlockingResult for Result&lt;T, E&gt;<div class=\"where\">where\n    E: NonBlockingError,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Result\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Result\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Result</a> = Result&lt;Option&lt;T&gt;, E&gt;</h4></section></summary><div class='docblock'>Type of the converted result: <code>Result&lt;Option&lt;T&gt;, E&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.no_block\" class=\"method trait-impl\"><a href=\"#method.no_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">no_block</a>(self) -&gt; &lt;Result&lt;T, E&gt; as NonBlockingResult&gt;::Result</h4></section></summary><div class='docblock'>Perform the non-block conversion.</div></details></div></details>","NonBlockingResult","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Ord-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Ord for Result&lt;T, E&gt;<div class=\"where\">where\n    T: Ord,\n    E: Ord,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cmp</a>(&amp;self, other: &amp;Result&lt;T, E&gt;) -&gt; Ordering</h4></section></summary><div class='docblock'>This method returns an [<code>Ordering</code>] between <code>self</code> and <code>other</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.50.0\">1.50.0</span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized + PartialOrd,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a>Read more</a></div></details></div></details>","Ord","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialEq-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; PartialEq for Result&lt;T, E&gt;<div class=\"where\">where\n    T: PartialEq,\n    E: PartialEq,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, other: &amp;Result&lt;T, E&gt;) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialOrd-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; PartialOrd for Result&lt;T, E&gt;<div class=\"where\">where\n    T: PartialOrd,\n    E: PartialOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Result&lt;T, E&gt;) -&gt; Option&lt;Ordering&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">le</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ge</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a>Read more</a></div></details></div></details>","PartialOrd","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3CResult%3CU,+E%3E%3E-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.16.0\">1.16.0</span><a href=\"#impl-Product%3CResult%3CU,+E%3E%3E-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, E&gt; Product&lt;Result&lt;U, E&gt;&gt; for Result&lt;T, E&gt;<div class=\"where\">where\n    T: Product&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; Result&lt;T, E&gt;<div class=\"where\">where\n    I: Iterator&lt;Item = Result&lt;U, E&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the [<code>Iterator</code>]: if it is an [<code>Err</code>], no further\nelements are taken, and the [<code>Err</code>] is returned. Should no [<code>Err</code>]\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>Err</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Result</span>&lt;usize, <span class=\"kw\">_</span>&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Result</span>&lt;usize, <span class=\"kw\">_</span>&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;()).product();\n<span class=\"macro\">assert!</span>(total.is_err());</code></pre></div>\n</div></details></div></details>","Product<Result<U, E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Residual%3CT%3E-for-Result%3CInfallible,+E%3E\" class=\"impl\"><a href=\"#impl-Residual%3CT%3E-for-Result%3CInfallible,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Residual&lt;T&gt; for Result&lt;Infallible, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.TryType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.TryType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">TryType</a> = Result&lt;T, E&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2_residual</code>)</span></div></span><div class='docblock'>The “return” type of this meta-function.</div></details></div></details>","Residual<T>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Result%3C%26T,+E%3E\" class=\"impl\"><a href=\"#impl-Result%3C%26T,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Result&lt;&amp;T, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.copied\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0\">1.59.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">copied</a>(self) -&gt; Result&lt;T, E&gt;<div class=\"where\">where\n    T: Copy,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the contents of the\n<code>Ok</code> part.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>i32, i32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span>val);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>copied = x.copied();\n<span class=\"macro\">assert_eq!</span>(copied, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">12</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cloned\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0\">1.59.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">cloned</a>(self) -&gt; Result&lt;T, E&gt;<div class=\"where\">where\n    T: Clone,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the contents of the\n<code>Ok</code> part.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>val = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>i32, i32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span>val);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>cloned = x.cloned();\n<span class=\"macro\">assert_eq!</span>(cloned, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">12</span>));</code></pre></div>\n</div></details></div></details>",0,"rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Result%3C%26mut+T,+E%3E\" class=\"impl\"><a href=\"#impl-Result%3C%26mut+T,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Result&lt;&amp;mut T, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.copied\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0\">1.59.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">copied</a>(self) -&gt; Result&lt;T, E&gt;<div class=\"where\">where\n    T: Copy,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the contents of the\n<code>Ok</code> part.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;mut </span>i32, i32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span>val);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>copied = x.copied();\n<span class=\"macro\">assert_eq!</span>(copied, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">12</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cloned\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0\">1.59.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">cloned</a>(self) -&gt; Result&lt;T, E&gt;<div class=\"where\">where\n    T: Clone,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the contents of the\n<code>Ok</code> part.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;mut </span>i32, i32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span>val);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>cloned = x.cloned();\n<span class=\"macro\">assert_eq!</span>(cloned, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">12</span>));</code></pre></div>\n</div></details></div></details>",0,"rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Result%3COption%3CT%3E,+E%3E\" class=\"impl\"><a href=\"#impl-Result%3COption%3CT%3E,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Result&lt;Option&lt;T&gt;, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.transpose\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/82814\" title=\"Tracking issue for const_result\">unstable</a>)</span><h4 class=\"code-header\">pub fn <a class=\"fn\">transpose</a>(self) -&gt; Option&lt;Result&lt;T, E&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>.</p>\n<p><code>Ok(None)</code> will be mapped to <code>None</code>.\n<code>Ok(Some(_))</code> and <code>Err(_)</code> will be mapped to <code>Some(Ok(_))</code> and <code>Some(Err(_))</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Debug, Eq, PartialEq)]\n</span><span class=\"kw\">struct </span>SomeErr;\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Option</span>&lt;i32&gt;, SomeErr&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;i32, SomeErr&gt;&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(x.transpose(), y);</code></pre></div>\n</div></details></div></details>",0,"rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Result%3CResult%3CT,+E%3E,+E%3E\" class=\"impl\"><a href=\"#impl-Result%3CResult%3CT,+E%3E,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Result&lt;Result&lt;T, E&gt;, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.flatten\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">flatten</a>(self) -&gt; Result&lt;T, E&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>result_flattening</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code></p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(result_flattening)]\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, u32&gt;, u32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"hello\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"hello\"</span>), x.flatten());\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, u32&gt;, u32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">6</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">6</span>), x.flatten());\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, u32&gt;, u32&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">6</span>), x.flatten());</code></pre></div>\n<p>Flattening only removes one level of nesting at a time:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(result_flattening)]\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, u32&gt;, u32&gt;, u32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"hello\"</span>)));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"hello\"</span>)), x.flatten());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"hello\"</span>), x.flatten().flatten());</code></pre></div>\n</div></details></div></details>",0,"rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Result&lt;T, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ok\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_ok</a>(&amp;self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the result is [<code>Ok</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;i32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(-<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_ok(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;i32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"Some error message\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_ok(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ok_and\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">is_ok_and</a>(self, f: impl FnOnce(T) -&gt; bool) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the result is [<code>Ok</code>] and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_ok_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_ok_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"hey\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_ok_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_err\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_err</a>(&amp;self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the result is [<code>Err</code>].</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;i32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(-<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_err(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;i32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"Some error message\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_err(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_err_and\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">is_err_and</a>(self, f: impl FnOnce(E) -&gt; bool) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the result is [<code>Err</code>] and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{Error, ErrorKind};\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, Error&gt; = <span class=\"prelude-val\">Err</span>(Error::new(ErrorKind::NotFound, <span class=\"string\">\"!\"</span>));\n<span class=\"macro\">assert_eq!</span>(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, Error&gt; = <span class=\"prelude-val\">Err</span>(Error::new(ErrorKind::PermissionDenied, <span class=\"string\">\"!\"</span>));\n<span class=\"macro\">assert_eq!</span>(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, Error&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">123</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">ok</a>(self) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>Result&lt;T, E&gt;</code> to [<code>Option&lt;T&gt;</code>].</p>\n<p>Converts <code>self</code> into an [<code>Option&lt;T&gt;</code>], consuming <code>self</code>,\nand discarding the error, if any.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"Nothing here\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[8,8],&quot;src/cmp_websocket_client/cmp_websocket_client.rs.html#60&quot;,&quot;line 60&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_websocket_client/cmp_websocket_client.rs (<a href=\"src/cmp_websocket_client/cmp_websocket_client.rs.html#60\">line 60</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n<span>61</span>\n<span>62</span>\n<span>63</span>\n<span>64</span>\n<span>65</span>\n<span>66</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button>    <span class=\"kw\">fn </span>parse_tick(data: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Message&lt;Data&gt;&gt; {\n        <span class=\"kw\">let </span>parts: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = data.split(<span class=\"string\">' '</span>).collect();\n        <span class=\"kw\">if </span>parts.len() != <span class=\"number\">2 </span>{\n            <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n        }\n        <span class=\"kw\">if </span>parts[<span class=\"number\">0</span>] != <span class=\"string\">\"tick\" </span>{\n            <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n        }\n        <span class=\"kw\">let </span>num: <span class=\"prelude-ty\">Option</span>&lt;u64&gt; = parts[<span class=\"number\">1</span>].parse().<span class=\"highlight focus\">ok</span>();\n        <span class=\"kw\">let </span>num = <span class=\"kw\">match </span>num {\n            <span class=\"prelude-val\">Some</span>(val) =&gt; val,\n            <span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n        };\n        <span class=\"prelude-val\">Some</span>(Message::new_custom(Data::Tick(num)))\n    }</code></pre></div></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.err\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">err</a>(self) -&gt; Option&lt;E&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>Result&lt;T, E&gt;</code> to [<code>Option&lt;E&gt;</code>].</p>\n<p>Converts <code>self</code> into an [<code>Option&lt;E&gt;</code>], consuming <code>self</code>,\nand discarding the success value, if any.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.err(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"Nothing here\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.err(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Nothing here\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_ref</a>(&amp;self) -&gt; Result&lt;&amp;T, &amp;E&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.</p>\n<p>Produces a new <code>Result</code>, containing a reference\ninto the original, leaving the original in place.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.as_ref(), <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"Error\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.as_ref(), <span class=\"prelude-val\">Err</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"Error\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/82814\" title=\"Tracking issue for const_result\">unstable</a>)</span><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut</a>(&amp;mut self) -&gt; Result&lt;&amp;mut T, &amp;mut E&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>mutate(r: <span class=\"kw-2\">&amp;mut </span><span class=\"prelude-ty\">Result</span>&lt;i32, i32&gt;) {\n    <span class=\"kw\">match </span>r.as_mut() {\n        <span class=\"prelude-val\">Ok</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n        <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"kw-2\">*</span>e = <span class=\"number\">0</span>,\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Result</span>&lt;i32, i32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\nmutate(<span class=\"kw-2\">&amp;mut </span>x);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Result</span>&lt;i32, i32&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"number\">13</span>);\nmutate(<span class=\"kw-2\">&amp;mut </span>x);\n<span class=\"macro\">assert_eq!</span>(x.unwrap_err(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">map</a>&lt;U, F&gt;(self, op: F) -&gt; Result&lt;U, E&gt;<div class=\"where\">where\n    F: FnOnce(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function to a\ncontained [<code>Ok</code>] value, leaving an [<code>Err</code>] value untouched.</p>\n<p>This function can be used to compose the results of two functions.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Print the numbers on each line of a string multiplied by two.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>line = <span class=\"string\">\"1\\n2\\n3\\n4\\n\"</span>;\n\n<span class=\"kw\">for </span>num <span class=\"kw\">in </span>line.lines() {\n    <span class=\"kw\">match </span>num.parse::&lt;i32&gt;().map(|i| i * <span class=\"number\">2</span>) {\n        <span class=\"prelude-val\">Ok</span>(n) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"{n}\"</span>),\n        <span class=\"prelude-val\">Err</span>(..) =&gt; {}\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: FnOnce(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default (if [<code>Err</code>]), or\napplies a function to the contained value (if [<code>Ok</code>]).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"Result::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw\">_</span>, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>str, <span class=\"kw\">_</span>&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.41.0\">1.41.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: FnOnce(E) -&gt; U,\n    F: FnOnce(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function <code>default</code> to\na contained [<code>Err</code>] value, or function <code>f</code> to a contained [<code>Ok</code>] value.</p>\n<p>This function can be used to unpack a successful result\nwhile handling an error.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x : <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw\">_</span>, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|e| k * <span class=\"number\">2</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x : <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>str, <span class=\"kw\">_</span>&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|e| k * <span class=\"number\">2</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_err\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">map_err</a>&lt;F, O&gt;(self, op: O) -&gt; Result&lt;T, F&gt;<div class=\"where\">where\n    O: FnOnce(E) -&gt; F,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function to a\ncontained [<code>Err</code>] value, leaving an [<code>Ok</code>] value untouched.</p>\n<p>This function can be used to pass through a successful result while handling\nan error.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>stringify(x: u32) -&gt; String { <span class=\"macro\">format!</span>(<span class=\"string\">\"error code: {x}\"</span>) }\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, u32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_err(stringify), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, u32&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_err(stringify), <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"error code: 13\"</span>.to_string()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.76.0\">1.76.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; Result&lt;T, E&gt;<div class=\"where\">where\n    F: FnOnce(&amp;T),</div></h4></section></summary><div class=\"docblock\"><p>Calls a function with a reference to the contained value if [<code>Ok</code>].</p>\n<p>Returns the original result.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: u8 = <span class=\"string\">\"4\"\n    </span>.parse::&lt;u8&gt;()\n    .inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"original: {x}\"</span>))\n    .map(|x| x.pow(<span class=\"number\">3</span>))\n    .expect(<span class=\"string\">\"failed to parse number\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect_err\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.76.0\">1.76.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">inspect_err</a>&lt;F&gt;(self, f: F) -&gt; Result&lt;T, E&gt;<div class=\"where\">where\n    F: FnOnce(&amp;E),</div></h4></section></summary><div class=\"docblock\"><p>Calls a function with a reference to the contained value if [<code>Err</code>].</p>\n<p>Returns the original result.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::{fs, io};\n\n<span class=\"kw\">fn </span>read() -&gt; io::Result&lt;String&gt; {\n    fs::read_to_string(<span class=\"string\">\"address.txt\"</span>)\n        .inspect_err(|e| <span class=\"macro\">eprintln!</span>(<span class=\"string\">\"failed to read file: {e}\"</span>))\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.47.0\">1.47.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">as_deref</a>(&amp;self) -&gt; Result&lt;&amp;&lt;T as Deref&gt;::Target, &amp;E&gt;<div class=\"where\">where\n    T: Deref,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to <code>Result&lt;&amp;&lt;T as Deref&gt;::Target, &amp;E&gt;</code>.</p>\n<p>Coerces the [<code>Ok</code>] variant of the original [<code>Result</code>] via <a href=\"crate::ops::Deref\"><code>Deref</code></a>\nand returns the new [<code>Result</code>].</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;String, u32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"hello\"</span>.to_string());\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>str, <span class=\"kw-2\">&amp;</span>u32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), y);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;String, u32&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>str, <span class=\"kw-2\">&amp;</span>u32&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>);\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), y);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.47.0\">1.47.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; Result&lt;&amp;mut &lt;T as Deref&gt;::Target, &amp;mut E&gt;<div class=\"where\">where\n    T: DerefMut,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to <code>Result&lt;&amp;mut &lt;T as DerefMut&gt;::Target, &amp;mut E&gt;</code>.</p>\n<p>Coerces the [<code>Ok</code>] variant of the original [<code>Result</code>] via <a href=\"crate::ops::DerefMut\"><code>DerefMut</code></a>\nand returns the new [<code>Result</code>].</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"string\">\"HELLO\"</span>.to_string();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Result</span>&lt;String, u32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"hello\"</span>.to_string());\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;mut </span>str, <span class=\"kw-2\">&amp;mut </span>u32&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span>s);\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Result</span>&lt;String, u32&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;mut </span>str, <span class=\"kw-2\">&amp;mut </span>u32&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"kw-2\">&amp;mut </span>i);\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">iter</a>(&amp;self) -&gt; Iter&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<p>The iterator yields one value if the result is [<code>Result::Ok</code>], otherwise none.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">7</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"nothing!\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; IterMut&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<p>The iterator yields one value if the result is [<code>Result::Ok</code>], otherwise none.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">7</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">40</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">40</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"nothing!\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">expect</a>(self, msg: &amp;str) -&gt; T<div class=\"where\">where\n    E: Debug,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Ok</code>] value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the [<code>Err</code>]\ncase explicitly, or call <a href=\"Result::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"Result::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"Result::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is an [<code>Err</code>], with a panic message including the\npassed message, and the content of the [<code>Err</code>].</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"emergency failure\"</span>);\nx.expect(<span class=\"string\">\"Testing expect\"</span>); <span class=\"comment\">// panics with `Testing expect: emergency failure`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Result</code> should be <code>Ok</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>path = std::env::var(<span class=\"string\">\"IMPORTANT_PATH\"</span>)\n    .expect(<span class=\"string\">\"env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our recommendation please\nrefer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the\n<a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[10,12],&quot;src/cmp_mqtt_client/main.rs.html#22-24&quot;,&quot;lines 22-24&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_mqtt_client/main.rs (<a href=\"src/cmp_mqtt_client/main.rs.html#22-24\">lines 22-24</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">use </span>tokio::task::JoinSet;\n\n    tracing_subscriber::fmt().init();\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>task_set = JoinSet::new();\n\n    task_set.spawn(publish::publish());\n    task_set.spawn(subscribe::subscribe());\n\n    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(res) = task_set.join_next().<span class=\"kw\">await </span><span class=\"highlight focus\">{\n        res.unwrap()\n    }\n</span>}</code></pre></div></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example \" data-locs=\"[[[34,34],&quot;src/env_vars/env_vars.rs.html#37&quot;,&quot;line 37&quot;],[[44,44],&quot;src/env_vars/env_vars.rs.html#47&quot;,&quot;line 47&quot;]]\"><div class=\"scraped-example-title\">examples/env_vars/env_vars.rs (<a href=\"src/env_vars/env_vars.rs.html#37\">line 37</a>)</div><div class=\"code-wrapper\"><button class=\"prev\">&pr;</button> <button class=\"next\">&sc;</button><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>3</span>\n<span>4</span>\n<span>5</span>\n<span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">use </span>serde::{Deserialize, Serialize};\n    <span class=\"kw\">use </span>url::Url;\n\n    <span class=\"doccomment\">/// Структура со всеми переменными\n    </span><span class=\"attr\">#[derive(Clone, Debug, Deserialize, Serialize)]\n    </span><span class=\"kw\">pub struct </span>Config {\n        <span class=\"kw\">pub </span>db_host: String,\n        <span class=\"kw\">pub </span>db_port: u16,\n        <span class=\"kw\">pub </span>db_user: String,\n        <span class=\"kw\">pub </span>db_password: String,\n    }\n\n    <span class=\"doccomment\">/// Задаем настройки по-умолчанию\n    </span><span class=\"kw\">impl </span>Default <span class=\"kw\">for </span>Config {\n        <span class=\"kw\">fn </span>default() -&gt; <span class=\"self\">Self </span>{\n            <span class=\"self\">Self </span>{\n                db_host: <span class=\"string\">\"localhost\"</span>.into(),\n                db_port: <span class=\"number\">5432</span>,\n                db_user: <span class=\"string\">\"postgres\"</span>.into(),\n                db_password: <span class=\"string\">\"postgres\"</span>.into(),\n            }\n        }\n    }\n\n    <span class=\"doccomment\">/// Добавляем переменные, которые собираются из заданных в файле\n    </span><span class=\"kw\">impl </span>Config {\n        <span class=\"doccomment\">/// Подключение к БД с данными\n        </span><span class=\"attr\">#[allow(dead_code)]\n        </span><span class=\"kw\">pub fn </span>db_data_url(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; Url {\n            <span class=\"kw\">let </span>url = <span class=\"macro\">format!</span>(\n                <span class=\"string\">\"postgres://{}:{}@{}:{}/db_data\"</span>,\n                <span class=\"self\">self</span>.db_user, <span class=\"self\">self</span>.db_password, <span class=\"self\">self</span>.db_host, <span class=\"self\">self</span>.db_port\n            );\n            Url::parse(<span class=\"kw-2\">&amp;</span>url).<span class=\"highlight focus\">expect</span>(<span class=\"string\">\"Неправильно заданный адрес БД\"</span>)\n        }\n    }\n\n    <span class=\"kw\">impl </span>IEnvVars <span class=\"kw\">for </span>Config {}\n\n    <span class=\"kw\">use </span>rsiot::env_vars::{load_config, IEnvVars};\n\n    tracing_subscriber::fmt().init();\n    <span class=\"kw\">let </span>config = load_config::&lt;Config&gt;();\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{:#?}\"</span>, config)<span class=\"highlight\">;\n</span>}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[24,24],&quot;src/executor_single_thread/main.rs.html#40&quot;,&quot;line 40&quot;]]\"><div class=\"scraped-example-title\">examples/executor/executor-single-thread/main.rs (<a href=\"src/executor_single_thread/main.rs.html#40\">line 40</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">use </span>message::Message;\n    <span class=\"kw\">use </span>tokio::task::LocalSet;\n\n    <span class=\"kw\">use </span>rsiot::executor::{ComponentExecutor, ComponentExecutorConfig};\n\n    tracing_subscriber::fmt().init();\n\n    <span class=\"kw\">let </span>local_set = LocalSet::new();\n\n    <span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"example_single_thread\"</span>.into(),\n        fn_auth: |<span class=\"kw\">_</span>, <span class=\"kw\">_</span>| <span class=\"prelude-val\">None</span>,\n    };\n\n    local_set.spawn_local(<span class=\"kw\">async </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cmps = ComponentExecutor::&lt;Message&gt;::new(executor_config)\n            .add_cmp(example_component1::Cmp::new(example_component1::Config {}))\n            .add_cmp(example_component2::Cmp::new(example_component2::Config {}));\n\n        cmps.wait_result().<span class=\"kw\">await</span>.unwrap();\n    });\n\n    local_set.<span class=\"kw\">await</span><span class=\"highlight focus\">;\n</span>}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[30,30],&quot;src/cmp_modbus_client_fermenter/main.rs.html#39&quot;,&quot;line 39&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_modbus_client_fermenter/main.rs (<a href=\"src/cmp_modbus_client_fermenter/main.rs.html#39\">line 39</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() -&gt; anyhow::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>tracing::{level_filters::LevelFilter, Level};\n    <span class=\"kw\">use </span>tracing_subscriber::fmt;\n\n    <span class=\"kw\">use </span>rsiot::{\n        components::{cmp_logger, cmp_modbus_client},\n        executor::{ComponentExecutor, ComponentExecutorConfig},\n    };\n\n    <span class=\"kw\">use </span>message::Data;\n\n    fmt().with_max_level(LevelFilter::INFO).init();\n\n    <span class=\"kw\">let </span>logger_config = cmp_logger::Config {\n        level: Level::INFO,\n        fn_input: |msg| <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(msg.serialize()<span class=\"question-mark\">?</span>)),\n    };\n\n    <span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"example_single_thread\"</span>.into(),\n        fn_auth: |msg, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>(msg),\n    };\n\n    ComponentExecutor::&lt;Data&gt;::new(executor_config)\n        .add_cmp(cmp_modbus_client::Cmp::new(config::config()))\n        .add_cmp(cmp_logger::Cmp::new(logger_config))\n        .wait_result()\n        .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n    <span class=\"prelude-val\">Ok</span><span class=\"highlight focus\">(())\n</span>}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[39,39],&quot;src/cmp_timescaledb/cmp_timescaledb.rs.html#48&quot;,&quot;line 48&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_timescaledb/cmp_timescaledb.rs (<a href=\"src/cmp_timescaledb/cmp_timescaledb.rs.html#48\">line 48</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() -&gt; anyhow::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>tokio::time::Duration;\n    <span class=\"kw\">use </span>url::Url;\n\n    <span class=\"kw\">use </span>rsiot::{\n        components::{cmp_inject_periodic, cmp_timescaledb},\n        executor::{ComponentExecutor, ComponentExecutorConfig},\n        message::{example_message::<span class=\"kw-2\">*</span>, <span class=\"kw-2\">*</span>},\n    };\n\n    tracing_subscriber::fmt().init();\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>counter = <span class=\"number\">0.0</span>;\n    <span class=\"kw\">let </span>inject_config = cmp_inject_periodic::Config {\n        period: Duration::from_secs(<span class=\"number\">2</span>),\n        fn_periodic: <span class=\"kw\">move </span>|| {\n            <span class=\"kw\">let </span>msg = Message::new_custom(Custom::ValueInstantF64(counter));\n            counter += <span class=\"number\">1.0</span>;\n            <span class=\"macro\">vec!</span>[msg]\n        },\n    };\n\n    <span class=\"kw\">let </span>url = Url::parse(<span class=\"string\">\"postgres://postgres:postgres@localhost:5432/db_data_test\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>db_config = cmp_timescaledb::Config {\n        connection_string: url,\n    };\n\n    <span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"timescaledb-storing\"</span>.into(),\n        fn_auth: |msg, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>(msg),\n    };\n\n    ComponentExecutor::new(executor_config)\n        .add_cmp(cmp_inject_periodic::Cmp::new(inject_config))\n        .add_cmp(cmp_timescaledb::Cmp::new(db_config))\n        .wait_result()\n        .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n    <span class=\"prelude-val\">Ok</span><span class=\"highlight focus\">(())\n</span>}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[49,49],&quot;src/cmp_inject_periodic/cmp_inject_periodic.rs.html#59&quot;,&quot;line 59&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_inject_periodic/cmp_inject_periodic.rs (<a href=\"src/cmp_inject_periodic/cmp_inject_periodic.rs.html#59\">line 59</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n<span>50</span>\n<span>51</span>\n<span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() -&gt; anyhow::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>tokio::{task::LocalSet, time::Duration};\n    <span class=\"kw\">use </span>tracing::{level_filters::LevelFilter, Level};\n\n    <span class=\"kw\">use </span>rsiot::{\n        components::{cmp_inject_periodic, cmp_logger},\n        executor::{ComponentExecutor, ComponentExecutorConfig},\n        message::{example_message::<span class=\"kw-2\">*</span>, Message},\n    };\n\n    tracing_subscriber::fmt()\n        .with_max_level(LevelFilter::DEBUG)\n        .init();\n\n    <span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"cmp_inject_periodic\"</span>.into(),\n        fn_auth: |msg, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>(msg),\n    };\n\n    <span class=\"kw\">let </span>logger_config = cmp_logger::Config {\n        level: Level::INFO,\n        fn_input: |msg| <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(msg.serialize()<span class=\"question-mark\">?</span>)),\n    };\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>counter = <span class=\"number\">0.0</span>;\n    <span class=\"kw\">let </span>inject_config = cmp_inject_periodic::Config {\n        period: Duration::from_secs(<span class=\"number\">2</span>),\n        fn_periodic: <span class=\"kw\">move </span>|| {\n            <span class=\"kw\">let </span>msg = Custom::ValueInstantF64(counter);\n            <span class=\"kw\">let </span>msg = Message::new_custom(msg);\n            counter += <span class=\"number\">1.0</span>;\n            <span class=\"macro\">vec!</span>[msg]\n        },\n    };\n\n    <span class=\"kw\">let </span>local_set = LocalSet::new();\n\n    local_set.spawn_local(<span class=\"kw\">async </span>{\n        ComponentExecutor::&lt;Custom&gt;::new(executor_config)\n            .add_cmp(cmp_logger::Cmp::new(logger_config))\n            .add_cmp(cmp_inject_periodic::Cmp::new(inject_config))\n            .wait_result()\n            .<span class=\"kw\">await\n            </span>.unwrap();\n    });\n\n    local_set.<span class=\"kw\">await</span>;\n\n    <span class=\"prelude-val\">Ok</span><span class=\"highlight focus\">(())\n</span>}</code></pre></div></div></div><div class=\"example-links\">Additional examples can be found in:<br><ul><li><a href=\"src/cmp_redis_client_subscription/subscription.rs.html#75\">examples/cmp_redis_client/subscription.rs</a></li><li><a href=\"src/cmp_websocket_server/cmp_websocket_server.rs.html#65\">examples/cmp_websocket_server.rs</a></li><li><a href=\"src/cmp_auth/cmp_auth.rs.html#56\">examples/cmp_auth.rs</a></li><li><a href=\"src/cmp_influxdb/cmp_influxdb.rs.html#60\">examples/cmp_influxdb/cmp_influxdb.rs</a></li><li><a href=\"src/cmp_external_fn_process/cmp_external_fn_process.rs.html#71\">examples/cmp_external_fn_process/cmp_external_fn_process.rs</a></li><li><a href=\"src/cmp_redis_client_publication/publication.rs.html#71\">examples/cmp_redis_client/publication.rs</a></li><li><a href=\"src/cmp_surrealdb/cmp_surrealdb.rs.html#81\">examples/cmp_surrealdb/cmp_surrealdb.rs</a></li><li><a href=\"src/cmp_websocket_client/cmp_websocket_client.rs.html#104\">examples/cmp_websocket_client/cmp_websocket_client.rs</a></li><li><a href=\"src/cmp_modbus_client_simulator/cmp_modbus_client_simulator.rs.html#101\">examples/cmp_modbus_client_simulator.rs</a></li><li><a href=\"src/cmp_http_client/cmp_http_client.rs.html#121\">examples/cmp_http_client/cmp_http_client.rs</a></li></ul></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">unwrap</a>(self) -&gt; T<div class=\"where\">where\n    E: Debug,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Ok</code>] value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the [<code>Err</code>]\ncase explicitly, or call <a href=\"Result::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"Result::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"Result::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the value is an [<code>Err</code>], with a panic message provided by the\n[<code>Err</code>]’s value.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"number\">2</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"emergency failure\"</span>);\nx.unwrap(); <span class=\"comment\">// panics with `emergency failure`</span></code></pre></div>\n</div><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[11,11],&quot;src/cmp_mqtt_client/main.rs.html#23&quot;,&quot;line 23&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_mqtt_client/main.rs (<a href=\"src/cmp_mqtt_client/main.rs.html#23\">line 23</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">use </span>tokio::task::JoinSet;\n\n    tracing_subscriber::fmt().init();\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>task_set = JoinSet::new();\n\n    task_set.spawn(publish::publish());\n    task_set.spawn(subscribe::subscribe());\n\n    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(res) = task_set.join_next().<span class=\"kw\">await </span>{\n        res.<span class=\"highlight focus\">unwrap</span>()\n    }\n}</code></pre></div></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example \" data-locs=\"[[[21,21],&quot;src/executor_single_thread/main.rs.html#37&quot;,&quot;line 37&quot;]]\"><div class=\"scraped-example-title\">examples/executor/executor-single-thread/main.rs (<a href=\"src/executor_single_thread/main.rs.html#37\">line 37</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">use </span>message::Message;\n    <span class=\"kw\">use </span>tokio::task::LocalSet;\n\n    <span class=\"kw\">use </span>rsiot::executor::{ComponentExecutor, ComponentExecutorConfig};\n\n    tracing_subscriber::fmt().init();\n\n    <span class=\"kw\">let </span>local_set = LocalSet::new();\n\n    <span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"example_single_thread\"</span>.into(),\n        fn_auth: |<span class=\"kw\">_</span>, <span class=\"kw\">_</span>| <span class=\"prelude-val\">None</span>,\n    };\n\n    local_set.spawn_local(<span class=\"kw\">async </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cmps = ComponentExecutor::&lt;Message&gt;::new(executor_config)\n            .add_cmp(example_component1::Cmp::new(example_component1::Config {}))\n            .add_cmp(example_component2::Cmp::new(example_component2::Config {}));\n\n        cmps.wait_result().<span class=\"kw\">await</span>.<span class=\"highlight focus\">unwrap</span>();\n    });\n\n    local_set.<span class=\"kw\">await</span>;\n}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[30,30],&quot;src/cmp_mqtt_client/publish.rs.html#41&quot;,&quot;line 41&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_mqtt_client/publish.rs (<a href=\"src/cmp_mqtt_client/publish.rs.html#41\">line 41</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">pub async fn </span>publish() {\n    <span class=\"kw\">let </span>config_executor = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"publish\"</span>.into(),\n        fn_auth: |msg, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>(msg),\n    };\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>counter = <span class=\"number\">0</span>;\n    <span class=\"kw\">let </span>config_inject_periodic = cmp_inject_periodic::Config {\n        period: Duration::from_secs(<span class=\"number\">2</span>),\n        fn_periodic: <span class=\"kw\">move </span>|| {\n            <span class=\"kw\">let </span>msg = Message::new_custom(message::Custom::Counter(counter));\n            counter += <span class=\"number\">1</span>;\n            <span class=\"macro\">vec!</span>[msg]\n        },\n    };\n\n    <span class=\"kw\">let </span>config_mqtt_client = cmp_mqtt_client::Config {\n        client_id: <span class=\"string\">\"pubish\"</span>.into(),\n        host: <span class=\"string\">\"localhost\"</span>.into(),\n        port: <span class=\"number\">1883</span>,\n        fn_input: |msg| <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(msg.serialize()<span class=\"question-mark\">?</span>.into_bytes())),\n        fn_output: |<span class=\"kw\">_</span>| <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">None</span>),\n    };\n\n    ComponentExecutor::&lt;message::Custom&gt;::new(config_executor)\n        .add_cmp(cmp_mqtt_client::Cmp::new(config_mqtt_client))\n        .add_cmp(cmp_inject_periodic::Cmp::new(config_inject_periodic))\n        .wait_result()\n        .<span class=\"kw\">await\n        </span>.<span class=\"highlight focus\">unwrap</span>();\n}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[33,33],&quot;src/cmp_mqtt_client/subscribe.rs.html#43&quot;,&quot;line 43&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_mqtt_client/subscribe.rs (<a href=\"src/cmp_mqtt_client/subscribe.rs.html#43\">line 43</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">pub async fn </span>subscribe() {\n    <span class=\"kw\">let </span>config_executor = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"subscribe\"</span>.into(),\n        fn_auth: |msg, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>(msg),\n    };\n\n    <span class=\"kw\">let </span>config_logger = cmp_logger::Config {\n        level: Level::INFO,\n        fn_input: |msg| {\n            <span class=\"kw\">let </span>text = msg.serialize()<span class=\"question-mark\">?</span>;\n            <span class=\"kw\">let </span>text = <span class=\"macro\">format!</span>(<span class=\"string\">\"Subscribe: {text}\"</span>);\n            <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(text))\n        },\n    };\n\n    <span class=\"kw\">let </span>config_mqtt_client = cmp_mqtt_client::Config {\n        client_id: <span class=\"string\">\"subscribe\"</span>.into(),\n        host: <span class=\"string\">\"localhost\"</span>.into(),\n        port: <span class=\"number\">1883</span>,\n        fn_input: |<span class=\"kw\">_</span>| <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">None</span>),\n        fn_output: |payload: <span class=\"kw-2\">&amp;</span>[u8]| {\n            <span class=\"kw\">let </span>payload = String::from_utf8_lossy(payload);\n            <span class=\"kw\">let </span>msg = Message::deserialize(<span class=\"kw-2\">&amp;</span>payload)<span class=\"question-mark\">?</span>;\n            <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(msg))\n        },\n    };\n\n    ComponentExecutor::&lt;message::Custom&gt;::new(config_executor)\n        .add_cmp(cmp_logger::Cmp::new(config_logger))\n        .add_cmp(cmp_mqtt_client::Cmp::new(config_mqtt_client))\n        .wait_result()\n        .<span class=\"kw\">await\n        </span>.<span class=\"highlight focus\">unwrap</span>();\n}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[44,44],&quot;src/cmp_inject_periodic/cmp_inject_periodic.rs.html#54&quot;,&quot;line 54&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_inject_periodic/cmp_inject_periodic.rs (<a href=\"src/cmp_inject_periodic/cmp_inject_periodic.rs.html#54\">line 54</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n<span>50</span>\n<span>51</span>\n<span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() -&gt; anyhow::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>tokio::{task::LocalSet, time::Duration};\n    <span class=\"kw\">use </span>tracing::{level_filters::LevelFilter, Level};\n\n    <span class=\"kw\">use </span>rsiot::{\n        components::{cmp_inject_periodic, cmp_logger},\n        executor::{ComponentExecutor, ComponentExecutorConfig},\n        message::{example_message::<span class=\"kw-2\">*</span>, Message},\n    };\n\n    tracing_subscriber::fmt()\n        .with_max_level(LevelFilter::DEBUG)\n        .init();\n\n    <span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"cmp_inject_periodic\"</span>.into(),\n        fn_auth: |msg, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>(msg),\n    };\n\n    <span class=\"kw\">let </span>logger_config = cmp_logger::Config {\n        level: Level::INFO,\n        fn_input: |msg| <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(msg.serialize()<span class=\"question-mark\">?</span>)),\n    };\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>counter = <span class=\"number\">0.0</span>;\n    <span class=\"kw\">let </span>inject_config = cmp_inject_periodic::Config {\n        period: Duration::from_secs(<span class=\"number\">2</span>),\n        fn_periodic: <span class=\"kw\">move </span>|| {\n            <span class=\"kw\">let </span>msg = Custom::ValueInstantF64(counter);\n            <span class=\"kw\">let </span>msg = Message::new_custom(msg);\n            counter += <span class=\"number\">1.0</span>;\n            <span class=\"macro\">vec!</span>[msg]\n        },\n    };\n\n    <span class=\"kw\">let </span>local_set = LocalSet::new();\n\n    local_set.spawn_local(<span class=\"kw\">async </span>{\n        ComponentExecutor::&lt;Custom&gt;::new(executor_config)\n            .add_cmp(cmp_logger::Cmp::new(logger_config))\n            .add_cmp(cmp_inject_periodic::Cmp::new(inject_config))\n            .wait_result()\n            .<span class=\"kw\">await\n            </span>.<span class=\"highlight focus\">unwrap</span>();\n    });\n\n    local_set.<span class=\"kw\">await</span>;\n\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[57,57],&quot;src/cmp_influxdb/cmp_influxdb.rs.html#60&quot;,&quot;line 60&quot;]]\"><div class=\"scraped-example-title\">examples/cmp_influxdb/cmp_influxdb.rs (<a href=\"src/cmp_influxdb/cmp_influxdb.rs.html#60\">line 60</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>3</span>\n<span>4</span>\n<span>5</span>\n<span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n<span>50</span>\n<span>51</span>\n<span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n<span>61</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">use </span>std::time::Duration;\n\n    <span class=\"kw\">use </span>tracing::level_filters::LevelFilter;\n\n    <span class=\"kw\">use </span>rsiot::{\n        components::{cmp_influxdb, cmp_inject_periodic},\n        executor::{ComponentExecutor, ComponentExecutorConfig},\n        message::{example_message::<span class=\"kw-2\">*</span>, <span class=\"kw-2\">*</span>},\n    };\n\n    <span class=\"kw\">const </span>TOKEN: <span class=\"kw-2\">&amp;</span>str =\n        <span class=\"string\">\"6ux3LH1s0wOf4z2vIec6cmYYk03GgTksvxD3OnaM71xfOfyj9NQTvKq8TZRb5iInEl_PpoVFHFQB43CyaoJMhg==\"</span>;\n\n    tracing_subscriber::fmt()\n        .with_max_level(LevelFilter::INFO)\n        .init();\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>counter = <span class=\"number\">0</span>;\n    <span class=\"kw\">let </span>inject_config = cmp_inject_periodic::Config {\n        period: Duration::from_secs(<span class=\"number\">2</span>),\n        fn_periodic: <span class=\"kw\">move </span>|| {\n            <span class=\"kw\">let </span>msg = Message::new_custom(Custom::ValueInstantF64(counter <span class=\"kw\">as </span>f64));\n            counter += <span class=\"number\">1</span>;\n            <span class=\"macro\">vec!</span>[msg]\n        },\n    };\n\n    <span class=\"kw\">let </span>influxdb_config = cmp_influxdb::Config {\n        host: <span class=\"string\">\"localhost\"</span>.into(),\n        port: <span class=\"number\">8086</span>,\n        org: <span class=\"string\">\"test\"</span>.into(),\n        bucket: <span class=\"string\">\"test1\"</span>.into(),\n        token: TOKEN.into(),\n        fn_input: |msg: <span class=\"kw-2\">&amp;</span>Message&lt;Custom&gt;| {\n            <span class=\"kw\">let </span>value = <span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span>msg.data {\n                MsgData::Custom(Custom::ValueInstantF64(data)) =&gt; {\n                    cmp_influxdb::ValueType::f64(<span class=\"kw-2\">*</span>data)\n                }\n                <span class=\"kw\">_ </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n            };\n            <span class=\"kw\">let </span>line = cmp_influxdb::LineProtocolItem::new(<span class=\"kw-2\">&amp;</span>msg.key, value, <span class=\"kw-2\">&amp;</span>msg.ts);\n            <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[line])\n        },\n    };\n\n    <span class=\"kw\">let </span>executor_config = ComponentExecutorConfig {\n        buffer_size: <span class=\"number\">100</span>,\n        executor_name: <span class=\"string\">\"example_single_thread\"</span>.into(),\n        fn_auth: |msg, <span class=\"kw\">_</span>| <span class=\"prelude-val\">Some</span>(msg),\n    };\n\n    ComponentExecutor::new(executor_config)\n        .add_cmp(cmp_inject_periodic::Cmp::new(inject_config))\n        .add_cmp(cmp_influxdb::Cmp::new(influxdb_config))\n        .wait_result()\n        .<span class=\"kw\">await\n        </span>.<span class=\"highlight focus\">unwrap</span>();\n}</code></pre></div></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.16.0\">1.16.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: Default,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Ok</code>] value or a default</p>\n<p>Consumes the <code>self</code> argument then, if [<code>Ok</code>], returns the contained\nvalue, otherwise if [<code>Err</code>], returns the default value for that\ntype.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>Converts a string to an integer, turning poorly-formed strings\ninto 0 (the default value for integers). <a href=\"str::parse\"><code>parse</code></a> converts\na string to any other type that implements <a href=\"crate::str::FromStr\"><code>FromStr</code></a>, returning an\n[<code>Err</code>] on error.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>good_year_from_input = <span class=\"string\">\"1909\"</span>;\n<span class=\"kw\">let </span>bad_year_from_input = <span class=\"string\">\"190blarg\"</span>;\n<span class=\"kw\">let </span>good_year = good_year_from_input.parse().unwrap_or_default();\n<span class=\"kw\">let </span>bad_year = bad_year_from_input.parse().unwrap_or_default();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1909</span>, good_year);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, bad_year);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect_err\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.17.0\">1.17.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">expect_err</a>(self, msg: &amp;str) -&gt; E<div class=\"where\">where\n    T: Debug,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Err</code>] value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the value is an [<code>Ok</code>], with a panic message including the\npassed message, and the content of the [<code>Ok</code>].</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>);\nx.expect_err(<span class=\"string\">\"Testing expect_err\"</span>); <span class=\"comment\">// panics with `Testing expect_err: 10`</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_err\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">unwrap_err</a>(self) -&gt; E<div class=\"where\">where\n    T: Debug,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Err</code>] value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if the value is an [<code>Ok</code>], with a custom panic message provided\nby the [<code>Ok</code>]’s value.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\nx.unwrap_err(); <span class=\"comment\">// panics with `2`</span></code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"emergency failure\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap_err(), <span class=\"string\">\"emergency failure\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_ok\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_ok</a>(self) -&gt; T<div class=\"where\">where\n    E: Into&lt;!&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unwrap_infallible</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the contained [<code>Ok</code>] value, but never panics.</p>\n<p>Unlike <a href=\"Result::unwrap\"><code>unwrap</code></a>, this method is known to never panic on the\nresult types it is implemented for. Therefore, it can be used\ninstead of <code>unwrap</code> as a maintainability safeguard that will fail\nto compile if the error type of the <code>Result</code> is later changed\nto an error that can actually occur.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">fn </span>only_good_news() -&gt; <span class=\"prelude-ty\">Result</span>&lt;String, !&gt; {\n    <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"this is fine\"</span>.into())\n}\n\n<span class=\"kw\">let </span>s: String = only_good_news().into_ok();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{s}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_err\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_err</a>(self) -&gt; E<div class=\"where\">where\n    T: Into&lt;!&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unwrap_infallible</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the contained [<code>Err</code>] value, but never panics.</p>\n<p>Unlike <a href=\"Result::unwrap_err\"><code>unwrap_err</code></a>, this method is known to never panic on the\nresult types it is implemented for. Therefore, it can be used\ninstead of <code>unwrap_err</code> as a maintainability safeguard that will fail\nto compile if the ok type of the <code>Result</code> is later changed\nto a type that can actually occur.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">fn </span>only_bad_news() -&gt; <span class=\"prelude-ty\">Result</span>&lt;!, String&gt; {\n    <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"Oops, it failed\"</span>.into())\n}\n\n<span class=\"kw\">let </span>error: String = only_bad_news().into_err();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{error}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">and</a>&lt;U&gt;(self, res: Result&lt;U, E&gt;) -&gt; Result&lt;U, E&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>res</code> if the result is [<code>Ok</code>], otherwise returns the [<code>Err</code>] value of <code>self</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"Result::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>str, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"late error\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"late error\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"early error\"</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>str, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"early error\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"not a 2\"</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>str, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"late error\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"not a 2\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>str, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"different result type\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"different result type\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">and_then</a>&lt;U, F&gt;(self, op: F) -&gt; Result&lt;U, E&gt;<div class=\"where\">where\n    F: FnOnce(T) -&gt; Result&lt;U, E&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls <code>op</code> if the result is [<code>Ok</code>], otherwise returns the [<code>Err</code>] value of <code>self</code>.</p>\n<p>This function can be used for control flow based on <code>Result</code> values.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Result</span>&lt;String, <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string()).ok_or(<span class=\"string\">\"overflowed\"</span>)\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"overflowed\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Err</span>(<span class=\"string\">\"not a number\"</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"not a number\"</span>));</code></pre></div>\n<p>Often used to chain fallible operations that may return [<code>Err</code>].</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::{io::ErrorKind, path::Path};\n\n<span class=\"comment\">// Note: on Windows \"/\" maps to \"C:\\\"\n</span><span class=\"kw\">let </span>root_modified_time = Path::new(<span class=\"string\">\"/\"</span>).metadata().and_then(|md| md.modified());\n<span class=\"macro\">assert!</span>(root_modified_time.is_ok());\n\n<span class=\"kw\">let </span>should_fail = Path::new(<span class=\"string\">\"/bad/path\"</span>).metadata().and_then(|md| md.modified());\n<span class=\"macro\">assert!</span>(should_fail.is_err());\n<span class=\"macro\">assert_eq!</span>(should_fail.unwrap_err().kind(), ErrorKind::NotFound);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">or</a>&lt;F&gt;(self, res: Result&lt;T, F&gt;) -&gt; Result&lt;T, F&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>res</code> if the result is [<code>Err</code>], otherwise returns the [<code>Ok</code>] value of <code>self</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"Result::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"late error\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"early error\"</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"not a 2\"</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"late error\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"late error\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">or_else</a>&lt;F, O&gt;(self, op: O) -&gt; Result&lt;T, F&gt;<div class=\"where\">where\n    O: FnOnce(E) -&gt; Result&lt;T, F&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls <code>op</code> if the result is [<code>Err</code>], otherwise returns the [<code>Ok</code>] value of <code>self</code>.</p>\n<p>This function can be used for control flow based on result values.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq(x: u32) -&gt; <span class=\"prelude-ty\">Result</span>&lt;u32, u32&gt; { <span class=\"prelude-val\">Ok</span>(x * x) }\n<span class=\"kw\">fn </span>err(x: u32) -&gt; <span class=\"prelude-ty\">Result</span>&lt;u32, u32&gt; { <span class=\"prelude-val\">Err</span>(x) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>).or_else(sq).or_else(sq), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>).or_else(err).or_else(sq), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">3</span>).or_else(sq).or_else(err), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">9</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">3</span>).or_else(err).or_else(err), <span class=\"prelude-val\">Err</span>(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Ok</code>] value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"Result::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>default = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">9</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or(default), <span class=\"number\">9</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"error\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or(default), default);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, op: F) -&gt; T<div class=\"where\">where\n    F: FnOnce(E) -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Ok</code>] value or computes it from a closure.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>count(x: <span class=\"kw-2\">&amp;</span>str) -&gt; usize { x.len() }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>).unwrap_or_else(count), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Err</span>(<span class=\"string\">\"foo\"</span>).unwrap_or_else(count), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.58.0\">1.58.0</span><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Ok</code>] value, consuming the <code>self</code> value,\nwithout checking that the value is not an [<code>Err</code>].</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on an [<code>Err</code>] is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"number\">2</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"emergency failure\"</span>);\n<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked(); } <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_err_unchecked\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.58.0\">1.58.0</span><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">unwrap_err_unchecked</a>(self) -&gt; E</h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Err</code>] value, consuming the <code>self</code> value,\nwithout checking that the value is not an [<code>Ok</code>].</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>Calling this method on an [<code>Ok</code>] is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">unsafe </span>{ x.unwrap_err_unchecked() }; <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;u32, <span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"emergency failure\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_err_unchecked() }, <span class=\"string\">\"emergency failure\"</span>);</code></pre></div>\n</div></details></div></details>",0,"rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ResultAdapter-for-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-ResultAdapter-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; ResultAdapter for Result&lt;T, E&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Ok\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ok\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Ok</a> = T</h4></section><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Err</a> = E</h4></section></div></details>","ResultAdapter","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ResultExt%3CT,+E%3E-for-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-ResultExt%3CT,+E%3E-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; ResultExt&lt;T, E&gt; for Result&lt;T, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.context\" class=\"method trait-impl\"><a href=\"#method.context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">context</a>&lt;C, E2&gt;(self, context: C) -&gt; Result&lt;T, E2&gt;<div class=\"where\">where\n    C: IntoError&lt;E2, Source = E&gt;,\n    E2: Error + ErrorCompat,</div></h4></section></summary><div class='docblock'>Extend a <a href=\"std::result::Result\"><code>Result</code></a>’s error with additional context-sensitive information. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_context\" class=\"method trait-impl\"><a href=\"#method.with_context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_context</a>&lt;F, C, E2&gt;(self, context: F) -&gt; Result&lt;T, E2&gt;<div class=\"where\">where\n    F: FnOnce(&amp;mut E) -&gt; C,\n    C: IntoError&lt;E2, Source = E&gt;,\n    E2: Error + ErrorCompat,</div></h4></section></summary><div class='docblock'>Extend a <a href=\"std::result::Result\"><code>Result</code></a>’s error with lazily-generated context-sensitive information. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.whatever_context\" class=\"method trait-impl\"><a href=\"#method.whatever_context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">whatever_context</a>&lt;S, E2&gt;(self, context: S) -&gt; Result&lt;T, E2&gt;<div class=\"where\">where\n    S: Into&lt;String&gt;,\n    E2: FromString,\n    E: Into&lt;&lt;E2 as FromString&gt;::Source&gt;,</div></h4></section></summary><div class='docblock'>Extend a [<code>Result</code>]’s error with information from a string. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_whatever_context\" class=\"method trait-impl\"><a href=\"#method.with_whatever_context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_whatever_context</a>&lt;F, S, E2&gt;(self, context: F) -&gt; Result&lt;T, E2&gt;<div class=\"where\">where\n    F: FnOnce(&amp;mut E) -&gt; S,\n    S: Into&lt;String&gt;,\n    E2: FromString,\n    E: Into&lt;&lt;E2 as FromString&gt;::Source&gt;,</div></h4></section></summary><div class='docblock'>Extend a [<code>Result</code>]’s error with information from a\nlazily-generated string. <a>Read more</a></div></details></div></details>","ResultExt<T, E>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Revisioned-for-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-Revisioned-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, T&gt; Revisioned for Result&lt;T, E&gt;<div class=\"where\">where\n    E: Revisioned,\n    T: Revisioned,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_revisioned\" class=\"method trait-impl\"><a href=\"#method.serialize_revisioned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize_revisioned</a>&lt;W&gt;(&amp;self, writer: &amp;mut W) -&gt; Result&lt;(), Error&gt;<div class=\"where\">where\n    W: Write,</div></h4></section></summary><div class='docblock'>Serializes the struct using the specficifed <code>writer</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_revisioned\" class=\"method trait-impl\"><a href=\"#method.deserialize_revisioned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize_revisioned</a>&lt;R&gt;(reader: &amp;mut R) -&gt; Result&lt;Result&lt;T, E&gt;, Error&gt;<div class=\"where\">where\n    R: Read,</div></h4></section></summary><div class='docblock'>Deserializes a new instance of the struct from the specficifed <code>reader</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.revision\" class=\"method trait-impl\"><a href=\"#method.revision\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">revision</a>() -&gt; u16</h4></section></summary><div class='docblock'>Returns the current revision of this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_id</a>() -&gt; TypeId<div class=\"where\">where\n    Self: 'static,</div></h4></section></summary><div class='docblock'>Returns the type id of this type.</div></details></div></details>","Revisioned","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Result%3CT,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/ser/impls.rs.html#695-698\">source</a><a href=\"#impl-Serialize-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"trait\" href=\"rsiot/message/trait.Serialize.html\" title=\"trait rsiot::message::Serialize\">Serialize</a> for Result&lt;T, E&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"rsiot/message/trait.Serialize.html\" title=\"trait rsiot::message::Serialize\">Serialize</a>,\n    E: <a class=\"trait\" href=\"rsiot/message/trait.Serialize.html\" title=\"trait rsiot::message::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.197/src/serde/ser/impls.rs.html#700-702\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rsiot/message/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; Result&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"rsiot/message/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3CResult%3CT,+E%3E%3E-for-Result%3CTAs,+EAs%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.7.0/src/serde_with/ser/impls.rs.html#275-278\">source</a><a href=\"#impl-SerializeAs%3CResult%3CT,+E%3E%3E-for-Result%3CTAs,+EAs%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, TAs, E, EAs&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.7.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;Result&lt;T, E&gt;&gt; for Result&lt;TAs, EAs&gt;<div class=\"where\">where\n    TAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.7.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;T&gt;,\n    EAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.7.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;E&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.7.0/src/serde_with/ser/impls.rs.html#280-282\">source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.7.0/serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;Result&lt;T, E&gt;,\n    serializer: S\n) -&gt; Result&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.197/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<Result<T, E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3CResult%3CU,+E%3E%3E-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.16.0\">1.16.0</span><a href=\"#impl-Sum%3CResult%3CU,+E%3E%3E-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, E&gt; Sum&lt;Result&lt;U, E&gt;&gt; for Result&lt;T, E&gt;<div class=\"where\">where\n    T: Sum&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; Result&lt;T, E&gt;<div class=\"where\">where\n    I: Iterator&lt;Item = Result&lt;U, E&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the [<code>Iterator</code>]: if it is an [<code>Err</code>], no further\nelements are taken, and the [<code>Err</code>] is returned. Should no [<code>Err</code>]\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up every integer in a vector, rejecting the sum if a negative\nelement is encountered:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>f = |<span class=\"kw-2\">&amp;</span>x: <span class=\"kw-2\">&amp;</span>i32| <span class=\"kw\">if </span>x &lt; <span class=\"number\">0 </span>{ <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"Negative element found\"</span>) } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">Ok</span>(x) };\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Result</span>&lt;i32, <span class=\"kw\">_</span>&gt; = v.iter().map(f).sum();\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">3</span>));\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, -<span class=\"number\">2</span>];\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Result</span>&lt;i32, <span class=\"kw\">_</span>&gt; = v.iter().map(f).sum();\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Err</span>(<span class=\"string\">\"Negative element found\"</span>));</code></pre></div>\n</div></details></div></details>","Sum<Result<U, E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TapFallible-for-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-TapFallible-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; TapFallible for Result&lt;T, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ok\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ok\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Ok</a> = T</h4></section></summary><div class='docblock'>The interior type used to indicate a successful construction.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Err</a> = E</h4></section></summary><div class='docblock'>The interior type used to indicate a failed construction.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_ok\" class=\"method trait-impl\"><a href=\"#method.tap_ok\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">tap_ok</a>(self, func: impl FnOnce(&amp;T)) -&gt; Result&lt;T, E&gt;</h4></section></summary><div class='docblock'>Immutably accesses an interior success value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_ok_mut\" class=\"method trait-impl\"><a href=\"#method.tap_ok_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">tap_ok_mut</a>(self, func: impl FnOnce(&amp;mut T)) -&gt; Result&lt;T, E&gt;</h4></section></summary><div class='docblock'>Mutably accesses an interior success value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_err\" class=\"method trait-impl\"><a href=\"#method.tap_err\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">tap_err</a>(self, func: impl FnOnce(&amp;E)) -&gt; Result&lt;T, E&gt;</h4></section></summary><div class='docblock'>Immutably accesses an interior failure value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_err_mut\" class=\"method trait-impl\"><a href=\"#method.tap_err_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">tap_err_mut</a>(self, func: impl FnOnce(&amp;mut E)) -&gt; Result&lt;T, E&gt;</h4></section></summary><div class='docblock'>Mutably accesses an interior failure value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_ok_dbg\" class=\"method trait-impl\"><a href=\"#method.tap_ok_dbg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">tap_ok_dbg</a>(self, func: impl FnOnce(&amp;Self::Ok)) -&gt; Self</h4></section></summary><div class='docblock'>Calls <code>.tap_ok()</code> only in debug builds, and is erased in release builds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_ok_mut_dbg\" class=\"method trait-impl\"><a href=\"#method.tap_ok_mut_dbg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">tap_ok_mut_dbg</a>(self, func: impl FnOnce(&amp;mut Self::Ok)) -&gt; Self</h4></section></summary><div class='docblock'>Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased in release\nbuilds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_err_dbg\" class=\"method trait-impl\"><a href=\"#method.tap_err_dbg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">tap_err_dbg</a>(self, func: impl FnOnce(&amp;Self::Err)) -&gt; Self</h4></section></summary><div class='docblock'>Calls <code>.tap_err()</code> only in debug builds, and is erased in release\nbuilds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_err_mut_dbg\" class=\"method trait-impl\"><a href=\"#method.tap_err_mut_dbg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">tap_err_mut_dbg</a>(self, func: impl FnOnce(&amp;mut Self::Err)) -&gt; Self</h4></section></summary><div class='docblock'>Calls <code>.tap_err_mut()</code> only in debug builds, and is erased in release\nbuilds.</div></details></div></details>","TapFallible","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Termination-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.61.0\">1.61.0</span><a href=\"#impl-Termination-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Termination for Result&lt;T, E&gt;<div class=\"where\">where\n    T: Termination,\n    E: Debug,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.report\" class=\"method trait-impl\"><a href=\"#method.report\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">report</a>(self) -&gt; ExitCode</h4></section></summary><div class='docblock'>Is called to get the representation of the value as status code.\nThis status code is returned to the operating system.</div></details></div></details>","Termination","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TestTermination-for-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-TestTermination-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; TestTermination for Result&lt;T, E&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.is_success\" class=\"method trait-impl\"><a href=\"#method.is_success\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_success</a>(&amp;self) -&gt; bool</h4></section></div></details>","TestTermination","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-Try-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Try for Result&lt;T, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Residual</a> = Result&lt;Infallible, E&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to [<code>FromResidual::from_residual</code>]\nas part of <code>?</code> when short-circuiting. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_output</a>(output: &lt;Result&lt;T, E&gt; as Try&gt;::Output) -&gt; Result&lt;T, E&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">branch</a>(\n    self\n) -&gt; ControlFlow&lt;&lt;Result&lt;T, E&gt; as Try&gt;::Residual, &lt;Result&lt;T, E&gt; as Try&gt;::Output&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned [<code>ControlFlow::Continue</code>])\nor propagate a value back to the caller\n(because this returned [<code>ControlFlow::Break</code>]). <a>Read more</a></div></details></div></details>","Try","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrapErr%3CT,+E%3E-for-Result%3CT,+E%3E\" class=\"impl\"><a href=\"#impl-WrapErr%3CT,+E%3E-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; WrapErr&lt;T, E&gt; for Result&lt;T, E&gt;<div class=\"where\">where\n    E: Diag + Send + Sync + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap_err\" class=\"method trait-impl\"><a href=\"#method.wrap_err\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrap_err</a>&lt;D&gt;(self, msg: D) -&gt; Result&lt;T, Report&gt;<div class=\"where\">where\n    D: Display + Send + Sync + 'static,</div></h4></section></summary><div class='docblock'>Wrap the error value with a new adhoc error</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap_err_with\" class=\"method trait-impl\"><a href=\"#method.wrap_err_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrap_err_with</a>&lt;D, F&gt;(self, msg: F) -&gt; Result&lt;T, Report&gt;<div class=\"where\">where\n    D: Display + Send + Sync + 'static,\n    F: FnOnce() -&gt; D,</div></h4></section></summary><div class='docblock'>Wrap the error value with a new adhoc error that is evaluated lazily\nonly once an error does occur.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.context\" class=\"method trait-impl\"><a href=\"#method.context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">context</a>&lt;D&gt;(self, msg: D) -&gt; Result&lt;T, Report&gt;<div class=\"where\">where\n    D: Display + Send + Sync + 'static,</div></h4></section></summary><div class='docblock'>Compatibility re-export of <code>wrap_err()</code> for interop with <code>anyhow</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_context\" class=\"method trait-impl\"><a href=\"#method.with_context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_context</a>&lt;D, F&gt;(self, msg: F) -&gt; Result&lt;T, Report&gt;<div class=\"where\">where\n    D: Display + Send + Sync + 'static,\n    F: FnOnce() -&gt; D,</div></h4></section></summary><div class='docblock'>Compatibility re-export of <code>wrap_err_with()</code> for interop with <code>anyhow</code></div></details></div></details>","WrapErr<T, E>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<section id=\"impl-Copy-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Copy-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Copy for Result&lt;T, E&gt;<div class=\"where\">where\n    T: Copy,\n    E: Copy,</div></h3></section>","Copy","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<section id=\"impl-Eq-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Eq-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; Eq for Result&lt;T, E&gt;<div class=\"where\">where\n    T: Eq,\n    E: Eq,</div></h3></section>","Eq","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<section id=\"impl-FromStream%3CResult%3CT,+E%3E%3E-for-Result%3CU,+E%3E\" class=\"impl\"><a href=\"#impl-FromStream%3CResult%3CT,+E%3E%3E-for-Result%3CU,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, E&gt; FromStream&lt;Result&lt;T, E&gt;&gt; for Result&lt;U, E&gt;<div class=\"where\">where\n    U: FromStream&lt;T&gt;,</div></h3></section>","FromStream<Result<T, E>>","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"],["<section id=\"impl-StructuralPartialEq-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-StructuralPartialEq-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; StructuralPartialEq for Result&lt;T, E&gt;</h3></section>","StructuralPartialEq","rsiot::components::_cmp_template::Result","rsiot::components::cmp_auth::Result","rsiot::components::cmp_derive::Result","rsiot::components::cmp_http_client::Result","rsiot::components::cmp_influxdb::Result","rsiot::components::cmp_modbus_client::Result","rsiot::components::cmp_mqtt_client::Result","rsiot::components::cmp_plc::Result","rsiot::components::cmp_redis_client::fn_process::Result","rsiot::components::cmp_slint::Result","rsiot::components::cmp_surrealdb::Result","rsiot::components::cmp_websocket_server::Result","rsiot::executor::types::CmpResult","rsiot::logging::Result"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()